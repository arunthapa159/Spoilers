{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"name":"Finished Distributed Memory","provenance":[{"file_id":"1CH3NKoDyzWmnPX4lv1EfakQV1IuEzqni","timestamp":1573917823725}],"collapsed_sections":["Ru7TqdYOkDaC"]}},"cells":[{"cell_type":"markdown","metadata":{"id":"7sJZVUmSkDYf","colab_type":"text"},"source":["# Data Mining Spoiler V3"]},{"cell_type":"code","metadata":{"id":"ytJwCzDD2L5K","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YRPqJ2DgkDYi","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from tqdm import tqdm\n","#tqdm.pandas(desc='progress-bar')\n","from gensim.models import Doc2Vec\n","from sklearn import utils\n","from sklearn.model_selection import train_test_split \n","import gensim\n","from sklearn.linear_model import LogisticRegression\n","from gensim.models.doc2vec import TaggedDocument\n","import re\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from google.colab import drive"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FbI8hZ7zkDYm","colab_type":"text"},"source":["# Exploring and adjusting some values in the dataset"]},{"cell_type":"code","metadata":{"id":"8fduI3dHSHyJ","colab_type":"code","outputId":"c592d1b4-2ddc-48d7-8e1b-dbff5ffc7fae","executionInfo":{"status":"ok","timestamp":1574759720590,"user_tz":-60,"elapsed":26350,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":176}},"source":["drive.mount('/gdrive')\n","%cd /gdrive\n","%cd My\\ Drive/\n","%cd Colab\\ Notebooks"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /gdrive\n","/gdrive\n","/gdrive/My Drive\n","/gdrive/My Drive/Colab Notebooks\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7nEcXwk-kDYn","colab_type":"code","colab":{}},"source":["df = pd.read_json('IMDB_reviews.json', lines=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ryl9JNr9kDYp","colab_type":"code","outputId":"bf72ad35-cc38-4dd4-d192-88180be6e4a8","executionInfo":{"status":"ok","timestamp":1574759742106,"user_tz":-60,"elapsed":47849,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review_date</th>\n","      <th>movie_id</th>\n","      <th>user_id</th>\n","      <th>is_spoiler</th>\n","      <th>review_text</th>\n","      <th>rating</th>\n","      <th>review_summary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10 February 2006</td>\n","      <td>tt0111161</td>\n","      <td>ur1898687</td>\n","      <td>True</td>\n","      <td>In its Oscar year, Shawshank Redemption (writt...</td>\n","      <td>10</td>\n","      <td>A classic piece of unforgettable film-making.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6 September 2000</td>\n","      <td>tt0111161</td>\n","      <td>ur0842118</td>\n","      <td>True</td>\n","      <td>The Shawshank Redemption is without a doubt on...</td>\n","      <td>10</td>\n","      <td>Simply amazing. The best film of the 90's.</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3 August 2001</td>\n","      <td>tt0111161</td>\n","      <td>ur1285640</td>\n","      <td>True</td>\n","      <td>I believe that this film is the best story eve...</td>\n","      <td>8</td>\n","      <td>The best story ever told on film</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1 September 2002</td>\n","      <td>tt0111161</td>\n","      <td>ur1003471</td>\n","      <td>True</td>\n","      <td>**Yes, there are SPOILERS here**This film has ...</td>\n","      <td>10</td>\n","      <td>Busy dying or busy living?</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20 May 2004</td>\n","      <td>tt0111161</td>\n","      <td>ur0226855</td>\n","      <td>True</td>\n","      <td>At the heart of this extraordinary movie is a ...</td>\n","      <td>8</td>\n","      <td>Great story, wondrously told and acted</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        review_date  ...                                 review_summary\n","0  10 February 2006  ...  A classic piece of unforgettable film-making.\n","1  6 September 2000  ...     Simply amazing. The best film of the 90's.\n","2     3 August 2001  ...               The best story ever told on film\n","3  1 September 2002  ...                     Busy dying or busy living?\n","4       20 May 2004  ...         Great story, wondrously told and acted\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"-Micb_2ukDYu","colab_type":"text"},"source":["Checking if the dataset is balanced or not"]},{"cell_type":"code","metadata":{"id":"VKIl1Wi4kDYu","colab_type":"code","outputId":"fedcf6bd-225e-42f3-a9d7-a8393b5966fe","executionInfo":{"status":"ok","timestamp":1574759742109,"user_tz":-60,"elapsed":47839,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["df = df[['is_spoiler', 'review_text']]\n","df.is_spoiler = df.is_spoiler.astype(int)\n","df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>is_spoiler</th>\n","      <th>review_text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>In its Oscar year, Shawshank Redemption (writt...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>The Shawshank Redemption is without a doubt on...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>I believe that this film is the best story eve...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>**Yes, there are SPOILERS here**This film has ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>At the heart of this extraordinary movie is a ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   is_spoiler                                        review_text\n","0           1  In its Oscar year, Shawshank Redemption (writt...\n","1           1  The Shawshank Redemption is without a doubt on...\n","2           1  I believe that this film is the best story eve...\n","3           1  **Yes, there are SPOILERS here**This film has ...\n","4           1  At the heart of this extraordinary movie is a ..."]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"Pkgc9if6kDYx","colab_type":"code","outputId":"4f7502e3-0f5e-4273-99f1-37b5a4f0361c","executionInfo":{"status":"ok","timestamp":1574759742111,"user_tz":-60,"elapsed":47828,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":299}},"source":["spoiler_length = len(df.loc[df['is_spoiler']==1])\n","not_spoiler_length = len(df.loc[df['is_spoiler']==0])\n","\n","spoiler_percentage = (spoiler_length*100)/(spoiler_length + not_spoiler_length)\n","not_spoiler_percentage = (not_spoiler_length*100)/(spoiler_length + not_spoiler_length)\n","\n","print('Number of reviews with spoilers: ' + str(spoiler_length) + ' (' + str(round(spoiler_percentage)) + '%)')\n","print('Number of reviews without spoilers: ' + str(not_spoiler_length) + ' (' + str(round(not_spoiler_percentage)) + '%)')\n","\n","# Graphical Representation\n","labels = 'Spoiler', 'Not spoiler'\n","explode = (0.1, 0)\n","plt.pie([spoiler_length, not_spoiler_length], explode=explode, labels = labels,autopct='%1.1f%%', shadow=True, startangle=90)\n","plt.title('Pie chart Spoiler vs Not-Spoiler')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Number of reviews with spoilers: 150924 (26%)\n","Number of reviews without spoilers: 422989 (74%)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"uD1BlQ39kDY0","colab_type":"text"},"source":["# Balancing the dataset\n","<br><br>\n","**REMINDER:** WE ARE CURRENTLY TRAINING A SUBSET TO MAKE CALCULATIONS FASTER"]},{"cell_type":"code","metadata":{"id":"Sj3rhbwDkDY0","colab_type":"code","outputId":"8f098ea6-132b-40de-8615-efea1eb09926","executionInfo":{"status":"ok","timestamp":1574759742113,"user_tz":-60,"elapsed":47816,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":347}},"source":["# Class count\n","count_not_spoiler, count_spoiler = df.is_spoiler.value_counts()\n","\n","# Divide by class\n","df_spoiler = df[ df['is_spoiler'] == 1 ]\n","df_not_spoiler = df[ df['is_spoiler'] == 0 ]\n","\n","# Random undersampling\n","# We reduce the number of not spoiler to the number of spoiler\n","# We use floor division (//) to use only 66% of the spoiler reviews (we can use the other 33% for testing)\n","#    By doing this, we still have 100.616 spoiler reviews for training\n","df_not_spoiler_under = df_not_spoiler.sample(int(count_spoiler//10))\n","df_spoiler_under = df_spoiler.sample(int(count_spoiler//10))\n","df_test_under = pd.concat([df_not_spoiler_under, df_spoiler_under], axis=0)\n","\n","\n","# The resulting dataset is balanced (100.616 reviews with spoilers and 100.616 without spoilers)\n","print('Random Undersampling')\n","df_test_under.is_spoiler.value_counts().plot(kind='bar', title='Count')\n","plt.show()\n","print(df_test_under.is_spoiler.value_counts())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Random Undersampling\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["1    15092\n","0    15092\n","Name: is_spoiler, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"X61sLcJgkDY3","colab_type":"text"},"source":["Creating the test set **(We have to optimize the way we obtain it, this is just temporal)**"]},{"cell_type":"code","metadata":{"id":"spAHh_BukDY4","colab_type":"code","colab":{}},"source":["# PROVISIONAL SOLUTION\n","df_not_spoiler_test = df_not_spoiler.sample(int(count_spoiler//25))\n","df_spoiler_test = df_spoiler.sample(int(count_spoiler//25))\n","df_not_spoiler_test.shape\n","\n","df_test = pd.concat([df_not_spoiler_test, df_spoiler_test], axis = 0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hMoceKO9kDY6","colab_type":"code","colab":{}},"source":["df_training = df_test_under"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RYsLCD-skDY9","colab_type":"text"},"source":["# Preprocessing\n","We start by defining the parameters that we are going to need for the preprocessing"]},{"cell_type":"code","metadata":{"id":"FiTLYscEkDY9","colab_type":"code","colab":{}},"source":["# We create a map that takes the outputs of pos-tagging and convert them into the inputs of lemmatization\n","# We use name as the default value\n","pos_map = {\n","'CC': 'n',\n","'CD': 'n',\n","'DT': 'n',\n","'EX': 'n',\n","'FW': 'n',\n","'IN': 'n',\n","'JJ': 'a',\n","'JJR': 'a',\n","'JJS': 'a',\n","'LS': 'n',\n","'MD': 'v',\n","'NN': 'n',\n","'NNS': 'n',\n","'NNP': 'n',\n","'NNPS': 'n',\n","'PDT': 'n',\n","'POS': 'n',\n","'PRP': 'n',\n","'PRP$': 'r',\n","'RB': 'r',\n","'RBR': 'r',\n","'RBS': 'r',\n","'RP': 'n',\n","'TO': 'n',\n","'UH': 'n',\n","'VB': 'v',\n","'VBD': 'v',\n","'VBG': 'v',\n","'VBN': 'v',\n","'VBP': 'v',\n","'VBZ': 'v',\n","'WDT': 'n',\n","'WP': 'n',\n","'WP$': 'n',\n","'WRB': 'r'\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2U7THsHpkDZA","colab_type":"code","outputId":"04b218ba-dceb-4b7f-ac5d-16d8b3d68d77","executionInfo":{"status":"ok","timestamp":1574759742389,"user_tz":-60,"elapsed":48069,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"source":["from nltk.corpus import stopwords\n","import nltk\n","nltk.download('stopwords')\n","\n","# We define our stop words list\n","stop_words = set(stopwords.words('english'))\n","len(stop_words)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["179"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"3JxoGW0LkDZC","colab_type":"text"},"source":["We define the tokenizer function"]},{"cell_type":"code","metadata":{"id":"98i1OtsqkDZD","colab_type":"code","colab":{}},"source":["import nltk\n","from bs4 import BeautifulSoup\n","from nltk.tokenize import RegexpTokenizer\n","from nltk.stem import WordNetLemmatizer\n","\n","# We initialize the lemmatizer\n","lemmatizer = WordNetLemmatizer()\n","\n","def tokenizer(example_sent):\n","    # example_sent = \"Hi, it's me\"\n","    # Since all the stopwords are in lower case, we have to convert the string to lowercase first\n","    example_sent = example_sent.lower()\n","\n","    # This was a simple tokenizer that kept the punctuation symbols\n","    # word_tokens = word_tokenize(example_sent)\n","    \n","    # Japanese words are kept as a single word, so we can remove them easily, but urls, emails and html tags are splitted, so we\n","    # have to remove them before tokenizing\n","    \n","    # Removing url, emails and html tags\n","    # HTML TAGS\n","    example_sent = BeautifulSoup(example_sent, 'lxml').text\n","\n","    # EMAIL ADDRESSES\n","    example_sent = re.sub(r'[\\w\\.-]+@[\\w\\.-]+', ' ', example_sent)\n","\n","    # URLs\n","    example_sent = re.sub(r'http\\S+', '', example_sent)\n","\n","    # Removing punctuation symbol\n","    tokenizer = RegexpTokenizer(r'\\w+')\n","    word_tokens = tokenizer.tokenize(example_sent)\n","    # Now we have obtained the tokenized words without punctuation symbols and with stopwords\n","\n","    # POS Tagging the data (the stopwords improve the accuracy of the pos tagging, so we'll remove them later)\n","    # This method returns a list of tuples: (word, classification)\n","    tags = nltk.pos_tag(word_tokens)\n","\n","    # We lemmatize all the words in the text by their category\n","    for i, word in enumerate(word_tokens):\n","        # Returns the lemmatized word given its category (if the key is not part of the map, the word is considered a noun)\n","        word_tokens[i] = lemmatizer.lemmatize(word, pos=pos_map.get(tags[i][1] , 'n'))\n","\n","    # Removing stop words\n","    filtered_sentence = [w for w in word_tokens if not w in stop_words]\n","\n","    # In html:  <br>  -->  br\n","    # In email:  jua@gmail.com  --> jua, gmail, com\n","    # In url: https://www.youtube.com  --> http, www, youtube, com\n","    return filtered_sentence"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CyRVURZ-kDZF","colab_type":"code","colab":{}},"source":["# Testing the tokenizer\n","# import nltk\n","# nltk.download('averaged_perceptron_tagger')\n","# test = \"<HTML>This <p>is.a</p> ! jua@email.com sentences, 友達 showing off the <br> stop words filtration. http://www.youtube.com\"\n","# tokenizer(test)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Vfs0ArYGkDZI","colab_type":"text"},"source":["This function takes 7 min with the reduced training set"]},{"cell_type":"code","metadata":{"id":"gU6-wVAckDZJ","colab_type":"code","colab":{}},"source":["# %%time\n","# df_training['review_text'] = df_training['review_text'].apply(tokenizer)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oOYam728kDZL","colab_type":"text"},"source":["3 minutes with the reduced test set"]},{"cell_type":"markdown","metadata":{"id":"d4P1zdC4XCgJ","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"scrolled":true,"id":"WYlrP0j8kDZM","colab_type":"code","colab":{}},"source":["# %%time\n","# df_test['review_text'] = df_test['review_text'].apply(tokenizer)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rvFgamXbkDZO","colab_type":"code","outputId":"a967e3c7-bb60-4e23-c8c4-71ddea764775","executionInfo":{"status":"ok","timestamp":1574759742398,"user_tz":-60,"elapsed":48050,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["df_training.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>is_spoiler</th>\n","      <th>review_text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>397608</th>\n","      <td>0</td>\n","      <td>Pumping himself up before the final race, Ligh...</td>\n","    </tr>\n","    <tr>\n","      <th>12434</th>\n","      <td>0</td>\n","      <td>Now I just can't get over how long it took for...</td>\n","    </tr>\n","    <tr>\n","      <th>192389</th>\n","      <td>0</td>\n","      <td>Adam Bell (Jake Gyllenhaal) is a history profe...</td>\n","    </tr>\n","    <tr>\n","      <th>495015</th>\n","      <td>0</td>\n","      <td>Ash Williams (Bruce Campbell) used to be an S-...</td>\n","    </tr>\n","    <tr>\n","      <th>492514</th>\n","      <td>0</td>\n","      <td>When Pulp Fiction (1994) came out the aficiona...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        is_spoiler                                        review_text\n","397608           0  Pumping himself up before the final race, Ligh...\n","12434            0  Now I just can't get over how long it took for...\n","192389           0  Adam Bell (Jake Gyllenhaal) is a history profe...\n","495015           0  Ash Williams (Bruce Campbell) used to be an S-...\n","492514           0  When Pulp Fiction (1994) came out the aficiona..."]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"koDFKi6XkDZR","colab_type":"code","outputId":"5cdcbcde-a6be-460a-96dc-5b9263692a9b","executionInfo":{"status":"ok","timestamp":1574759964149,"user_tz":-60,"elapsed":860,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["# We randomize the order of the rows\n","df_training = df_training.sample(frac=1)\n","df_test = df_test.sample(frac=1)\n","\n","df_training.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>is_spoiler</th>\n","      <th>review_text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>15338</th>\n","      <td>0</td>\n","      <td>I loved this film as a kid and not for the vio...</td>\n","    </tr>\n","    <tr>\n","      <th>360871</th>\n","      <td>0</td>\n","      <td>When I first saw 'Shaun of the Dead,' I wasn't...</td>\n","    </tr>\n","    <tr>\n","      <th>26950</th>\n","      <td>0</td>\n","      <td>Se7en is your run of the mill detective thrill...</td>\n","    </tr>\n","    <tr>\n","      <th>83724</th>\n","      <td>1</td>\n","      <td>Released in 1934, Frank Capra's 'It Happened O...</td>\n","    </tr>\n","    <tr>\n","      <th>192387</th>\n","      <td>0</td>\n","      <td>I had to see the movie twice before I started ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        is_spoiler                                        review_text\n","15338            0  I loved this film as a kid and not for the vio...\n","360871           0  When I first saw 'Shaun of the Dead,' I wasn't...\n","26950            0  Se7en is your run of the mill detective thrill...\n","83724            1  Released in 1934, Frank Capra's 'It Happened O...\n","192387           0  I had to see the movie twice before I started ..."]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"Ost0XC5DkDZU","colab_type":"text"},"source":["15 minutes 57s with the reduced dataset"]},{"cell_type":"code","metadata":{"id":"Z6U97hqFkDZU","colab_type":"code","outputId":"69998daa-a8a3-48f3-94b8-0e76cee92b3a","executionInfo":{"status":"ok","timestamp":1574760479227,"user_tz":-60,"elapsed":392580,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":139}},"source":["%%time\n","# Tagging the training set\n","nltk.download('wordnet')\n","nltk.download('averaged_perceptron_tagger')\n","train_tagged = df_training.apply(lambda r: TaggedDocument(words=tokenizer(r['review_text']), tags=[r.is_spoiler]), axis = 1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n","[nltk_data] Downloading package averaged_perceptron_tagger to\n","[nltk_data]     /root/nltk_data...\n","[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n","CPU times: user 6min 30s, sys: 621 ms, total: 6min 30s\n","Wall time: 6min 31s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ODmkn7cdkDZX","colab_type":"text"},"source":["6 minutes 29 s with the reduced dataset"]},{"cell_type":"code","metadata":{"id":"kPgX3t1PkDZa","colab_type":"code","outputId":"035aca57-82e3-42f9-a33d-92bd88a35599","executionInfo":{"status":"ok","timestamp":1574760660871,"user_tz":-60,"elapsed":159592,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["%%time\n","# Tagging the test set\n","test_tagged = df_test.apply(lambda r: TaggedDocument(words=tokenizer(r['review_text']), tags=[r.is_spoiler]), axis = 1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["CPU times: user 2min 37s, sys: 413 ms, total: 2min 38s\n","Wall time: 2min 38s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kdESIPKTkDZg","colab_type":"code","outputId":"e030b982-c107-40a0-e6e7-fa03a5cdcaaa","executionInfo":{"status":"ok","timestamp":1574760705377,"user_tz":-60,"elapsed":897,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["test_tagged.values[1]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TaggedDocument(words=['film', 'exceed', 'expectation', 'sure', 'think', 'end', 'little', 'disappointing', 'give', 'film', '10', '10', 'obvious', 'reporter', 'satan', 'give', 'away', 'earlier', 'discussion', 'kevin', 'unrealistic', 'want', 'go', 'onto', '60', 'minute', 'first', 'thing', 'morning', 'surprisingly', 'excellent', 'already', 'know', 'al', 'pacino', 'good', 'nobody', 'play', 'satan', 'good', 'see', 'end', 'day', 'still', 'blow', 'away', 'incredible', 'performance', 'however', 'also', 'surprise', 'good', 'keanu', 'reef', 'act', 'film', 'always', 'know', 'particularly', 'wooden', 'actor', 'trouble', 'show', 'emotion', 'amaze', 'film', '9', '10'], tags=[1])"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"7R_wm668kDZj","colab_type":"text"},"source":["# Set-up of Doc2Vec Training and Evaluation models"]},{"cell_type":"markdown","metadata":{"id":"d2KAQHFc0V1D","colab_type":"text"},"source":["Distributed Memory"]},{"cell_type":"code","metadata":{"id":"91l5e60S0wXP","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HzO3tObR1Eio","colab_type":"text"},"source":["Iterating over corpus"]},{"cell_type":"code","metadata":{"id":"Z90p0gLd1DOo","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x2372ucOkDZk","colab_type":"text"},"source":["## Distributed Bag of Words (DBOW)"]},{"cell_type":"code","metadata":{"id":"Vk-3-uCS3UQc","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from gensim.models import Doc2Vec\n","from sklearn import utils\n","from sklearn.model_selection import train_test_split\n","import gensim\n","from sklearn.linear_model import LogisticRegression\n","from gensim.models.doc2vec import TaggedDocument\n","import re\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HfcogaMdkDZl","colab_type":"code","outputId":"0e3de5c1-0d66-4702-9de3-d15409c958c8","executionInfo":{"status":"ok","timestamp":1574760716212,"user_tz":-60,"elapsed":631,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["import multiprocessing\n","\n","cores = multiprocessing.cpu_count()\n","cores"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"nF0H2Uyx26lc","colab_type":"code","outputId":"b9ac6078-9717-4469-a7ef-6141c7e4cee1","executionInfo":{"status":"ok","timestamp":1574760734199,"user_tz":-60,"elapsed":15189,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["model_dmm = Doc2Vec(dm=1, dm_mean=1, vector_size=300, window=10, negative=5, min_count=1, workers=5, alpha=0.065, min_alpha=0.065)\n","model_dmm.build_vocab([x for x in tqdm(train_tagged.values)])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["100%|██████████| 30184/30184 [00:00<00:00, 1682068.32it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"o_Hi-rYZ2vuG","colab_type":"code","outputId":"4c045ffa-7249-4b7a-b5ec-57f8adfc6244","executionInfo":{"status":"ok","timestamp":1574761315317,"user_tz":-60,"elapsed":572332,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":572}},"source":["%%time\n","for epoch in range(30):\n","    model_dmm.train(utils.shuffle([x for x in tqdm(train_tagged.values)]), total_examples=len(train_tagged.values), epochs=1)\n","    model_dmm.alpha -= 0.002\n","    model_dmm.min_alpha = model_dmm.alpha"],"execution_count":0,"outputs":[{"output_type":"stream","text":["100%|██████████| 30184/30184 [00:00<00:00, 1633074.98it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2060125.17it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2068641.70it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2071349.34it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 1935349.26it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2300495.57it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2313274.23it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2861295.30it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2287485.26it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2540298.81it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2146614.31it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2168491.52it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2432246.68it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 3101746.18it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2991231.26it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2057714.29it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2066075.98it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2034729.54it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2866153.63it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2403707.53it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2987842.72it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2404757.66it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2109065.45it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2016547.55it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2363102.85it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2368186.31it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2772322.34it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2459081.09it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2996612.19it/s]\n","100%|██████████| 30184/30184 [00:00<00:00, 2064054.91it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["CPU times: user 15min 24s, sys: 24.1 s, total: 15min 48s\n","Wall time: 9min 31s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KokckR-JkDZn","colab_type":"text"},"source":["The number of dimensions is an **hyperparameter**"]},{"cell_type":"code","metadata":{"id":"eyiJh6fmkDZo","colab_type":"code","colab":{}},"source":["# %%time\n","# # This 300 dimensions and min_count=3\n","# model_dbow = Doc2Vec(dm=0, vector_size=300, negative=5, hs=0, min_count=3, sample=0, workers=cores)\n","\n","# model_dbow.build_vocab([x for x in tqdm(train_tagged.values)])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wUYBG61AkDZr","colab_type":"text"},"source":["The number of epochs is an **hyperparameter** (1 hour 16 minutes with 750 epochs and the reduced dataset)"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"Zgi26p2EkDZr","colab_type":"code","colab":{}},"source":["# %%time\n","# # We will train during 100 epochs\n","# epochs = 200\n","# for epoch in range(epochs):\n","#     model_dbow.train(utils.shuffle([x for x in tqdm(train_tagged.values)]),\n","#                     total_examples=len(train_tagged.values), epochs=1)\n","#     model_dbow.alpha -= 0.002          # Original 0.002\n","#     model_dbow.min_alpha = model_dbow.alpha\n","#     print(epoch+1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mJo9440KkDZu","colab_type":"code","colab":{}},"source":["def vec_for_learning(model, tagged_docs):\n","    sents = tagged_docs.values\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\n","    \n","    return targets, regressors"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wWffRNSJkDZw","colab_type":"text"},"source":["Around 5 minutes with the reduced dataset <br>\n","| <br>\n","v"]},{"cell_type":"code","metadata":{"id":"UX6pOO6HkDZx","colab_type":"code","outputId":"e17d24a3-d9bc-4e38-eaa3-d61ebfdbc518","executionInfo":{"status":"ok","timestamp":1574762104813,"user_tz":-60,"elapsed":473282,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["%%time\n","# We declare the values and the targets (for both train and testing set)\n","y_train, x_train = vec_for_learning(model_dmm, train_tagged) \n","y_test, x_test = vec_for_learning(model_dmm, test_tagged) "],"execution_count":0,"outputs":[{"output_type":"stream","text":["CPU times: user 7min 45s, sys: 664 ms, total: 7min 45s\n","Wall time: 7min 46s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bmftG0L4kDZz","colab_type":"text"},"source":["# Logistic Regression"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"Q64Nrg3MkDZ0","colab_type":"code","outputId":"a5f0856d-6d04-42be-9354-ff8a71dd95ca","executionInfo":{"status":"ok","timestamp":1574762291511,"user_tz":-60,"elapsed":2951,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":107}},"source":["%%time\n","# We compute the logistic Regression\n","logreg = LogisticRegression(n_jobs = 1, C=1e5)\n","logreg.fit(x_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["CPU times: user 2.21 s, sys: 109 ms, total: 2.32 s\n","Wall time: 2.33 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"x5PeyerVkDZ3","colab_type":"code","outputId":"13c0ee78-ef78-4048-d480-cac245e02ae5","executionInfo":{"status":"ok","timestamp":1574762297077,"user_tz":-60,"elapsed":534,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["%%time\n","# We predict the values for the test set given the trained agent\n","y_pred = logreg.predict(x_test) "],"execution_count":0,"outputs":[{"output_type":"stream","text":["CPU times: user 30.9 ms, sys: 4.01 ms, total: 35 ms\n","Wall time: 37.4 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"k9E1bz5NkDZ5","colab_type":"code","outputId":"cfc3bde1-c50c-4e07-f3a4-257701a6518a","executionInfo":{"status":"ok","timestamp":1574762300394,"user_tz":-60,"elapsed":495,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":87}},"source":["# We compute f1-score and accuracy\n","from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n","\n","print('Testing accuracy: ' + str(accuracy_score(y_test, y_pred)))\n","print('Testing Precision: ' + str(precision_score(y_test, y_pred)))\n","print('Testing Recall: ' + str(recall_score(y_test, y_pred)))\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Testing accuracy: 0.6170477137176938\n","Testing Precision: 0.6762284859067099\n","Testing Recall: 0.4491385023194168\n","Testing F1 score: 0.6059377174655323\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WBhtebZ6kDZ7","colab_type":"code","colab":{}},"source":["# We predict the values for the test set given the trained agent\n","y_pred_training = logreg.predict(x_train) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"Uq7v2K-dkDZ9","colab_type":"code","outputId":"f093dc3e-5b91-4d93-e2d1-cc6fba7cb962","executionInfo":{"status":"ok","timestamp":1574762317077,"user_tz":-60,"elapsed":602,"user":{"displayName":"Piet Koller","photoUrl":"","userId":"15347707285453693920"}},"colab":{"base_uri":"https://localhost:8080/","height":87}},"source":["# We check the accuracy for the training set\n","print('Training accuracy: ' + str(accuracy_score(y_train, y_pred_training)))\n","print('Training Precision: ' + str(precision_score(y_train, y_pred_training)))\n","print('Training Recall: ' + str(recall_score(y_train, y_pred_training)))\n","print('Training F1 score: {}'.format(f1_score(y_train, y_pred_training, average='weighted')))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training accuracy: 0.715113967664988\n","Training Precision: 0.7429105873550318\n","Training Recall: 0.6578982242247549\n","Training F1 score: 0.7141782899111424\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CRi2WbBmkDaA","colab_type":"text"},"source":["**Possible problem:** The problem is not linear, so we cannot use Logistic Regression <br>\n","About number of dimensions: Typical interval is between 100-300. I would say you need at least 50D to achieve lowest accuracy. If you pick lesser number of dimensions, you will start to lose properties of high dimensional spaces. If training time is not a big deal for your application, i would stick with 200D dimensions as it gives nice features. Extreme accuracy can be obtained with 300D. After 300D word features won't improve dramatically, and training will be extremely slow."]},{"cell_type":"markdown","metadata":{"id":"XPLv_3K2kDaA","colab_type":"text"},"source":["# Support Vector Machine"]},{"cell_type":"markdown","metadata":{"id":"3YsV50ENkDaB","colab_type":"text"},"source":["**For Gaussian kernel:**\n","- Training accuracy: 0.5202093824542804\n","- Training Precision: 0.527418194893923\n","- Training Recall: 0.38874900609594487\n","- Training F1 score: 0.5117719072851213 \n","<br> <br>\n","- Testing accuracy: 0.5120112657388999\n","- Testing Precision: 0.5163104611923509\n","- Testing Recall: 0.3802186878727634\n","- Testing F1 score: 0.5033854263794245\n","\n","\n","**We have to modify the degree (default: 3)** <br>\n","**For Polynomial kernel:**"]},{"cell_type":"markdown","metadata":{"id":"Ru7TqdYOkDaC","colab_type":"text"},"source":["### Parameters for SVM\n","*Bibliography: https://medium.com/all-things-ai/in-depth-parameter-tuning-for-svc-758215394769*\n","- **Gamma:** Parameter for non linear hyperplanes. The higher the gamma value it tries to exactly fit the training data set. <br>\n","```>>>gammas = [0.1, 1, 10, 100]```\n","\n","- **C:** C is the penalty parameter of the error term. It controls the trade off between smooth decision boundary and classifying the training points correctly. Increasing C values may lead to overfitting the training data. <br>\n","```>>>cs = [0.1, 1, 10, 100, 1000]```\n","\n","- **Degree:** Degree is a parameter used when kernel is set to 'poly'. It's the degree of the polynomial used to find the hyperplane to split the data. Using degree=1 is the same as using a ‘linear’ kernel. Also, increasing this parameters leads to higher training times. <br>\n","```>>>degrees = [0, 1, 2, 3, 4, 5, 6]```"]},{"cell_type":"markdown","metadata":{"id":"bz4pLlOikDaC","colab_type":"text"},"source":["First, we delete temporary training data to free up RAM."]},{"cell_type":"code","metadata":{"id":"yXofapAOkDaD","colab_type":"code","colab":{}},"source":["model_dmm.delete_temporary_training_data(keep_doctags_vectors=True, keep_inference=True)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EgFqrfFkkDaF","colab_type":"text"},"source":["13 minutes and 47s with reduced dataset, rbf kernel, gamma = 10 and C=1000 -> overfitting  (1. for all variables in training)<br>\n","1h 21 minutes 48s with reduced dataset, rbf kernel, gamma = 0.5 and C=100 -> overfitting (1. for all variables in training) <br>\n","4h 2min 45s with reduced dataset, rbf kernel, gamma = 0.1 and C=100 -> overfitting (.90 for all variables in training) <br>\n","6min 56s with reduced dataset, rbf kernel, gamma = 0.01 and C=10 -> underfitting:\n","- Training accuracy: 0.5371388815266366, Testing accuracy: 0.5019880715705766\n","- Training Precision: 0.5390510694628301, Testing Precision: 0.5020604395604396\n","- Training Recall: 0.5126557116353034, Testing Recall: 0.48442677269715045\n","- Training F1 score: 0.5368612643084398, Testing F1 score: 0.5018344377006682 <br>\n","\n","21min 54s with reduced dataset, rbf kernel, gamma = 0.1 and C=10:\n","- Training accuracy: 0.7053074476543865, Testing accuracy: 0.4937872763419483\n","- Training Precision: 0.7119212092196157, Testing Precision: 0.4935042438939893\n","- Training Recall: 0.6897031539888683, Testing Recall: 0.47200132538104705\n","- Training F1 score: 0.7052356743153277, Testing F1 score: 0.4935468996924189 <br>\n","\n","------------------ with reduced dataset, rbf kernel, gamma = 0.01 and C = 100:"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"rHbq238ekDaG","colab_type":"code","colab":{}},"source":["%%time\n","import datetime\n","\n","# Printing the starting time\n","datetime.datetime.now()\n","datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)\n","print(datetime.datetime.now())\n","\n","# Alternative 1: Support Vector Machines\n","from sklearn import svm\n","\n","# We create the SVM and select a kernel\n","# poly: Polynomial Kernel\n","# rbf: Gaussian Kernel\n","# sigmoid: Sigmoid kernel\n","#\n","clf = svm.SVC(kernel='rbf', gamma=0.01, C=100, cache_size=7000)\n","\n","# Train the model using the training sets\n","clf.fit(x_train, y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"EzCMI3wMkDaJ","colab_type":"code","colab":{}},"source":["%%time\n","y_pred_training_svm = clf.predict(x_train) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LQqQBpY-kDaL","colab_type":"code","colab":{}},"source":["# We compute f1-score and accuracy for the svm\n","from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n","\n","# We check the accuracy for the training set\n","print('Training accuracy: ' + str(accuracy_score(y_train, y_pred_training_svm)))\n","print('Training Precision: ' + str(precision_score(y_train, y_pred_training_svm)))\n","print('Training Recall: ' + str(recall_score(y_train, y_pred_training_svm)))\n","print('Training F1 score: {}'.format(f1_score(y_train, y_pred_training_svm, average='weighted')))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5folRk27kDaO","colab_type":"code","colab":{}},"source":["%%time\n","y_pred_svm = clf.predict(x_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ewb-vD2TkDaR","colab_type":"code","colab":{}},"source":["# We compute f1-score and accuracy for the svm\n","from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n","\n","print('Testing accuracy: ' + str(accuracy_score(y_test, y_pred_svm)))\n","print('Testing Precision: ' + str(precision_score(y_test, y_pred_svm)))\n","print('Testing Recall: ' + str(recall_score(y_test, y_pred_svm)))\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred_svm, average='weighted')))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FgcFH8wbkDaU","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}